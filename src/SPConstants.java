public class SPConstants {
    static final byte[][] BiasWords = new byte[][]{
            {70, (byte) 151, (byte) 177, (byte) 186, (byte) 163, (byte) 183, 16, 10, (byte) 197, 55, (byte) 179, (byte) 201, 90, 40, (byte) 172, 100},
            {(byte) 236, (byte) 171, (byte) 170, (byte) 198, 103, (byte) 149, 88, 13, (byte) 248, (byte) 154, (byte) 246, 110, 102, (byte) 220, 5, 61},
            {(byte) 138, (byte) 195, (byte) 216, (byte) 137, 106, (byte) 233, 54, 73, 67, (byte) 191, (byte) 235, (byte) 212, (byte) 150, (byte) 155, 104, (byte) 160},
            {93, 87, (byte) 146, 31, (byte) 213, 113, 92, (byte) 187, 34, (byte) 193, (byte) 190, 123, (byte) 188, (byte) 153, 99, (byte) 148},
            {42, 97, (byte) 184, 52, 50, 25, (byte) 253, (byte) 251, 23, 64, (byte) 230, 81, 29, 65, 68, (byte) 143},
            {(byte) 221, 4, (byte) 128, (byte) 222, (byte) 231, 49, (byte) 214, 127, 1, (byte) 162, (byte) 247, 57, (byte) 218, 111, 35, (byte) 202},
            {58, (byte) 208, 28, (byte) 209, 48, 62, 18, (byte) 161, (byte) 205, 15, (byte) 224, (byte) 168, (byte) 175, (byte) 130, 89, 44},
            {125, (byte) 173, (byte) 178, (byte) 239, (byte) 194, (byte) 135, (byte) 206, 117, 6, 19, 2, (byte) 144, 79, 46, 114, 51},
            {(byte) 192, (byte) 141, (byte) 207, (byte) 169, (byte) 129, (byte) 226, (byte) 196, 39, 47, 108, 122, (byte) 159, 82, (byte) 225, 21, 56},
            {(byte) 252, 32, 66, (byte) 199, 8, (byte) 228, 9, 85, 94, (byte) 140, 20, 118, 96, (byte) 255, (byte) 223, (byte) 215},
            {(byte) 250, 11, 33, 0, 26, (byte) 249, (byte) 166, (byte) 185, (byte) 232, (byte) 158, 98, 76, (byte) 217, (byte) 145, 80, (byte) 210},
            {24, (byte) 180, 7, (byte) 132, (byte) 234, 91, (byte) 164, (byte) 200, 14, (byte) 203, 72, 105, 75, 78, (byte) 156, 53},
            {69, 77, 84, (byte) 229, 37, 60, 12, 74, (byte) 139, 63, (byte) 204, (byte) 167, (byte) 219, 107, (byte) 174, (byte) 244},
            {45, (byte) 243, 124, 109, (byte) 157, (byte) 181, 38, 116, (byte) 242, (byte) 147, 83, (byte) 176, (byte) 240, 17, (byte) 237, (byte) 131},
            {(byte) 182, 3, 22, 115, 59, 30, (byte) 142, 112, (byte) 189, (byte) 134, 27, 71, 126, 36, 86, (byte) 241},
            {(byte) 136, 70, (byte) 151, (byte) 177, (byte) 186, (byte) 163, (byte) 183, 16, 10, (byte) 197, 55, (byte) 179, (byte) 201, 90, 40, (byte) 172},
            {(byte) 220, (byte) 134, 119, (byte) 215, (byte) 166, 17, (byte) 251, (byte) 244, (byte) 186, (byte) 146, (byte) 145, 100, (byte) 131, (byte) 241, 51, (byte) 239}
    };

    static final byte[][] M = new byte[][]{
            {2, 2, 1, 1, 16, 8, 2, 1, 4, 2, 4, 2, 1, 1, 4, 4},
            {1, 1, 1, 1, 8, 4, 2, 1, 2, 1, 4, 2, 1, 1, 2, 2},
            {1, 1, 4, 4, 2, 1, 4, 2, 4, 2, 16, 8, 2, 2, 1, 1},
            {1, 1, 2, 2, 2, 1, 2, 1, 4, 2, 8, 4, 1, 1, 1, 1},
            {4, 4, 2, 1, 4, 2, 4, 2, 16, 8, 1, 1, 1, 1, 2, 2},
            {2, 2, 2, 1, 2, 1, 4, 2, 8, 4, 1, 1, 1, 1, 1, 1},
            {1, 1, 4, 2, 4, 2, 16, 8, 2, 1, 2, 2, 4, 4, 1, 1},
            {1, 1, 2, 1, 4, 2, 8, 4, 2, 1, 1, 1, 2, 2, 1, 1},
            {2, 1, 16, 8, 1, 1, 2, 2, 1, 1, 4, 4, 4, 2, 4, 2},
            {2, 1, 8, 4, 1, 1, 1, 1, 1, 1, 2, 2, 4, 2, 2, 1},
            {4, 2, 4, 2, 4, 4, 1, 1, 2, 2, 1, 1, 16, 8, 2, 1},
            {2, 1, 4, 2, 2, 2, 1, 1, 1, 1, 1, 1, 8, 4, 2, 1},
            {4, 2, 2, 2, 1, 1, 4, 4, 1, 1, 4, 2, 2, 1, 16, 8},
            {4, 2, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 2, 1, 8, 4},
            {16, 8, 1, 1, 2, 2, 1, 1, 4, 4, 2, 1, 4, 2, 4, 2},
            {8, 4, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 4, 2}
    };

    static final byte[][] M_Inverse = new byte[][]{
            {2, -2, 1, -2, 1, -1, 4, -8, 2, -4, 1, -1, 1, -2, 1, -1},
            {-4, 4, -2, 4, -2, 2, -8, 16, -2, 4, -1, 1, -1, 2, -1, 1},
            {1, -2, 1, -1, 2, -4, 1, -1, 1, -1, 1, -2, 2, -2, 4, -8},
            {-2, 4, -2, 2, -2, 4, -1, 1, -1, 1, -1, 2, -4, 4, -8, 16},
            {1, -1, 2, -4, 1, -1, 1, -2, 1, -2, 1, -1, 4, -8, 2, -2},
            {-1, 1, -2, 4, -1, 1, -1, 2, -2, 4, -2, 2, -8, 16, -4, 4},
            {2, -4, 1, -1, 1, -2, 1, -1, 2, -2, 4, -8, 1, -1, 1, -2},
            {-2, 4, -1, 1, -1, 2, -1, 1, -4, 4, -8, 16, -2, 2, -2, 4},
            {1, -1, 1, -2, 1, -1, 2, -4, 4, -8, 2, -2, 1, -2, 1, -1},
            {-1, 1, -1, 2, -1, 1, -2, 4, -8, 16, -4, 4, -2, 4, -2, 2},
            {1, -2, 1, -1, 4, -8, 2, -2, 1, -1, 1, -2, 1, -1, 2, -4},
            {-1, 2, -1, 1, -8, 16, -4, 4, -2, 2, -2, 4, -1, 1, -2, 4},
            {4, -8, 2, -2, 1, -2, 1, -1, 1, -2, 1, -1, 2, -4, 1, -1},
            {-8, 16, -4, 4, -2, 4, -2, 2, -1, 2, -1, 1, -2, 4, -1, 1},
            {1, -1, 4, -8, 2, -2, 1, -2, 1, -1, 2, -4, 1, -1, 1, -2},
            {-2, 2, -8, 16, -4, 4, -2, 4, -1, 1, -2, 4, -1, 1, -1, 2}
    };

    static final int[] additionRoundIndices = new int[]{0, 3, 4, 7, 8, 11, 12, 15};
    static final int[] modAdditionRoundIndices = new int[]{1, 2, 5, 6, 9, 10, 13, 14};
}
